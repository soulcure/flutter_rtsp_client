import 'dart:async';

import 'package:flutter/widgets.dart';
import 'package:flutter_rtsp_client/src/rtsp_player_value.dart';

import 'flutter_rtsp_client_platform_interface.dart';

class RtspPlayerController extends ValueNotifier<RtspPlayerValue> {
  /// Constructs a [VlcPlayerController] playing a video from obtained from
  /// the network.
  ///
  /// The URI for the video is given by the [dataSource] argument and must not be
  /// null.
  RtspPlayerController.network(
    this.dataSource, {
    this.autoInitialize = true,
  }) : super(RtspPlayerValue());

  /// The URI to the video file. This will be in different formats depending on
  /// the [DataSourceType] of the original video.
  final String dataSource;

  /// Initialize rtsp player when the platform is ready automatically
  final bool autoInitialize;

  bool? _isReadyToInitialize;

  /// The viewId for this controller
  // ignore: avoid-late-keyword
  late int _viewId;

  /// List of onInit listeners
  final List<VoidCallback> _onInitListeners = [];

  bool _isDisposed = false;

  /// Determine if platform is ready to call initialize method
  bool? get isReadyToInitialize => _isReadyToInitialize;

  /// This is just exposed for testing. It shouldn't be used by anyone depending
  /// on the plugin.
  @visibleForTesting
  int? get viewId => _viewId;

  /// Register a [VoidCallback] closure to be called when the controller gets initialized
  void addOnInitListener(VoidCallback listener) {
    _onInitListeners.add(listener);
  }

  /// Remove a previously registered closure from the list of onInit closures
  void removeOnInitListener(VoidCallback listener) {
    _onInitListeners.remove(listener);
  }

  /// Attempts to open the given [url] and load metadata about the video.
  Future<void> initialize() async {
    if (_isDisposed) {
      throw Exception(
        'initialize was called on a disposed VlcPlayerController',
      );
    }
    if (value.isInitialized) {
      throw Exception('Already Initialized');
    }

    await rtspPlayerPlatform.create(
      viewId: _viewId,
      uri: dataSource,
    );
  }

  /// Dispose controller
  @override
  Future<void> dispose() async {
    if (_isDisposed) {
      return;
    }
    _onInitListeners.clear();
    _isDisposed = true;
    super.dispose();
  }

  /// Notify onInit callback & all registered listeners
  void _notifyOnInitListeners() {
    for (final listener in _onInitListeners) {
      listener();
    }
  }

  /// [functionName] - name of function
  /// throw exception if vlc player controller is not initialized
  void _throwIfNotInitialized(String functionName) {
    if (!value.isInitialized) {
      throw Exception(
        '$functionName() was called on an uninitialized VlcPlayerController.',
      );
    }
    if (_isDisposed) {
      throw Exception(
        '$functionName() was called on a disposed VlcPlayerController.',
      );
    }
  }

  /// [viewId] - the id of view that is generated by the platform
  /// This method will be called after the platform view has been created
  Future<void> onPlatformViewCreated(int viewId) async {
    _viewId = viewId;
    if (autoInitialize) {
      await initialize();
    }
    _isReadyToInitialize = true;
  }
}
